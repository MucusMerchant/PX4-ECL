name: Wheels

on:
  push:
    branches:
      - master
      - stable
      - docs
      - actions*
    tags:
      - v*
  workflow_dispatch:

jobs:
  sdist:
    name: Source distribution
    runs-on: windows-latest
    if: startsWith(github.ref_name, 'docs') != true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v2.0

      - name: Install requirements
        run: |
          pip install twine wheel setuptools

      - name: build
        run: |
          make

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: my_binary
          path: ./*.pyd
          
      - name: Build sdist
        run: |
          python3 -m build --sdist --outdir wheelhouse

      - name: Install from sdist
        run: |
          pip install wheelhouse/*.tar.gz

      - name: Check sdist
        run: |
          python3 -m twine check wheelhouse/*

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: wheelhouse/*.tar.gz

  wheels:
    strategy:
      fail-fast: false
      matrix:
        include:
          - runs-on: ubuntu-latest
            cibw-arch: manylinux_x86_64
          - runs-on: ubuntu-latest
            cibw-arch: manylinux_i686
          - runs-on: ubuntu-latest
            cibw-arch: musllinux_x86_64
          - runs-on: ubuntu-latest
            cibw-arch: musllinux_i686
          - runs-on: macos-latest
            cibw-arch: macosx_x86_64
          - runs-on: macos-latest
            cibw-arch: macosx_arm64
          - runs-on: macos-latest
            cibw-arch: macosx_universal2
          - runs-on: windows-latest
            cibw-arch: win_amd64
          - runs-on: windows-latest
            cibw-arch: win32
            python-arch: x86

    name: Wheels â€¢ ${{ matrix.cibw-arch }}
    runs-on: ${{ matrix.runs-on }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          architecture: ${{ matrix.python-arch }}

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v2.0

      - name: Install requirements
        run: |
          pip install cibuildwheel twine pybind11 setuptools

      - name: Configure cibuildwheel
        shell: bash
        run: |
          CMAKE_ARCH="${{ matrix.cibw-arch == 'win32' && '-A Win32' || '' }}"
          MACOSX_DEPLOYMENT_TARGET="10.13"
          CMAKE_OSX_ARCHITECTURES=${{ matrix.cibw-arch == 'macosx_x86_64' && 'x86_64' || matrix.cibw-arch == 'macosx_arm64' && 'arm64' || matrix.cibw-arch == 'macosx_universal2' && '"arm64;x86_64"' || '' }}
          echo "CIBW_ARCHS_MACOS=x86_64 arm64 universal2" >> $GITHUB_ENV
          echo "CIBW_BUILD=*-${{ matrix.cibw-arch }}" >> $GITHUB_ENV
          echo "CIBW_MANYLINUX_X86_64_IMAGE=manylinux2014" >> $GITHUB_ENV
          echo "CIBW_MANYLINUX_I686_IMAGE=manylinux2014" >> $GITHUB_ENV
          
      - name: Run cibuildwheel
        if: startsWith(github.ref_name, 'docs') != true || matrix.cibw-arch == 'manylinux_x86_64'
        run: |
          cibuildwheel

      - name: Check built wheels
        if: startsWith(github.ref_name, 'docs') != true || matrix.cibw-arch == 'manylinux_x86_64'
        run: |
          twine check wheelhouse/*

      - name: Upload built wheels
        if: startsWith(github.ref_name, 'docs') != true
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.cibw-arch }}
          path: wheelhouse/ecl-*.whl
          if-no-files-found: error
